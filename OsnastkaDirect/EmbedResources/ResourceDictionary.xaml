<ResourceDictionary x:Class="OsnastkaDirect.ResourceDictionary"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:r="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
                    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
                    xmlns:my="clr-namespace:OsnastkaDirect.Data"
                    >
    <controls:BooleanToVisibilityConverter x:Key="boolConv" />
    <my:TreeViewLineConverter x:Key="LineConverter" />
    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="ToggleButton">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15"
                          Height="13"
                          SnapsToDevicePixels="True">
                        <Rectangle Width="9"
                                   Height="9"
                                   Stroke="#919191"
                                   SnapsToDevicePixels="true">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,2"
                                                     StartPoint="0.5,0">
                                    <GradientStop Color="White"
                                                  Offset="0" />
                                    <GradientStop Color="Silver"
                                                  Offset="0.5" />
                                    <GradientStop Color="LightGray"
                                                  Offset="1" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="ExpandPath"
                                   Width="1"
                                   Height="5"
                                   Stroke="Black"
                                   SnapsToDevicePixels="true" />
                        <Rectangle Width="5"
                                   Height="1"
                                   Stroke="Black"
                                   SnapsToDevicePixels="true" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="Visibility"
                                    TargetName="ExpandPath"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- TreeViewItem -->
    <Style x:Key="{x:Type TreeViewItem}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="1,0,0,0" />
        <!--<Setter Property="i:BringSelectedItemIntoViewBehavior.IsBringSelectedIntoView" Value="True"/>-->
        <Setter Property="IsSelected"
                Value="{Binding IsSelected,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />
        <Setter Property="IsExpanded"
                Value="{Binding IsExpanded,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" />
        <!--<EventSetter Event="Selected"
                     Handler="TreeViewSelectedItemChanged" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="39"
                                              Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!-- Connecting Lines -->
                        <Rectangle x:Name="HorLn"
                                   Margin="9,1,0,0"
                                   Height="1"
                                   Stroke="#DCDCDC"
                                   SnapsToDevicePixels="True" />
                        <Rectangle x:Name="VerLn"
                                   Width="1"
                                   Stroke="#DCDCDC"
                                   Margin="-21,0,1,0"
                                   Grid.RowSpan="2"
                                   SnapsToDevicePixels="true"
                                   Fill="White" />
                        <ToggleButton Margin="-22,0,0,0"
                                      x:Name="Expander"
                                      Style="{StaticResource ExpandCollapseToggleStyle}"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <Border Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              MinWidth="20" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- This trigger changes the connecting lines if the item is the last in the list -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}"
                                     Value="true">
                            <Setter TargetName="VerLn"
                                    Property="Height"
                                    Value="9" />
                            <Setter TargetName="VerLn"
                                    Property="VerticalAlignment"
                                    Value="Top" />
                        </DataTrigger>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Width"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinWidth"
                                    Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Height"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinHeight"
                                    Value="19" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <!--<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="LightBlue" />
                            <!--<Setter TargetName="Bd" Property="Opacity" Value="0.7"/>-->
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true" />
                                <Condition Property="IsSelectionActive"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="LightBlue" />
                            <!--<Setter TargetName="Bd" Property="Opacity" Value="0.7"/>-->
                            <Setter Property="Foreground"
                                    Value="White" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness"
                Value="1" />
        <!--</Style/>-->
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#26A0DA" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="my:TreeViewItemHelper.IsMouseDirectlyOverItem"
                               Value="True" />
                    <Condition Property="IsSelected"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="#E5F3FB" />
                <Setter Property="BorderBrush"
                        Value="#70C0E7" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsSelectionActive"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="#DADADA" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--<Style TargetType="{x:Type TreeView}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                             Color="#CBE8F6" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                             Color="#F6F6F6" />
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                             Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}"
                             Color="Black" />
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="BorderThickness"
                Value="1" />
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#26A0DA" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="my:TreeViewItemHelper.IsMouseDirectlyOverItem"
                               Value="True" />
                    <Condition Property="IsSelected"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="#E5F3FB" />
                <Setter Property="BorderBrush"
                        Value="#70C0E7" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsSelectionActive"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="#DADADA" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->
    <Style TargetType="{x:Type DataGrid}"
           BasedOn="{StaticResource ResourceKey=NewDataGrid}"
           x:Key="{x:Type DataGrid}">
    </Style>
    <Style TargetType="r:RibbonButton">
        <!--HasDropShadow="False"
    Placement="Relative" HorizontalOffset="15" VerticalOffset="10"-->
        <Setter Property="ToolTipService.InitialShowDelay"
                Value="10" />
        <Setter Property="ToolTipService.Placement"
                Value="Top" />
        <Setter Property="ToolTipService.VerticalOffset"
                Value="115" />
    </Style>
    <SolidColorBrush x:Key="DataGridHeaderColor"
                     Color="#C5D0E6" />
    <Style TargetType="DataGridRow"
           x:Key="DataGridRowBase">

        <Style.Triggers>
            <Trigger Property="DataGridRow.IsSelected"
                     Value="true">
                <Setter Property="BorderBrush"
                        Value="#FF2B579A" />
                <Setter Property="BorderThickness"
                        Value="0 1 0 1" />
                <Setter Property="Height"
                        Value="20" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height"
                Value="20" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="Padding"
                Value="0" />
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource ResourceKey=NewDataGridColumn}">
    </Style>
    <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource ResourceKey=NewDataGridCell}">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="Transparent" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground"
                        Value="{DynamicResource
       {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="FontSize"
                        Value="14" />
                <Setter Property="FontWeight"
                        Value="Bold" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},    Path=Content.Text}" />
    </Style>

    <Style TargetType="{x:Type CheckBox}"
           BasedOn="{StaticResource ResourceKey=NewCheckBox}"
           x:Key="{x:Type CheckBox}" />
    <Style TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource ResourceKey=NewComboBox}"
           x:Key="{x:Type ComboBox}">
        <!--<Setter Property="ComboBox.Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black"
                                  ShadowDepth="1"
                                  Opacity="0.4" />
            </Setter.Value>
        </Setter>-->
        <!--<Setter Property="Effect">
            <DropShadowEffect Color="Black"
                              ShadowDepth="1"
                              Opacity="0.4" />
        </Setter>-->
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}"
           BasedOn="{StaticResource ResourceKey=NewComboBoxItem}"
           x:Key="{x:Type ComboBoxItem}" />
    <Style TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource ResourceKey=NewRadioButton}"
           x:Key="{x:Type RadioButton}" />
    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource ResourceKey=WhiteButton}"
           x:Key="{x:Type Button}" />
    <Style TargetType="{x:Type ProgressBar}"
           BasedOn="{StaticResource ResourceKey=NewProgressBar}"
           x:Key="{x:Type ProgressBar}" />
    <Style TargetType="{x:Type Image}"
           BasedOn="{StaticResource ResourceKey=NewImage}"
           x:Key="{x:Type Image}" />
    <Style TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource ResourceKey=NewTextBox}"
           x:Key="{x:Type TextBox}" />
    <Style TargetType="{x:Type DatePickerTextBox}"
           BasedOn="{StaticResource ResourceKey=NewDatePickerTextBox}"
           x:Key="{x:Type DatePickerTextBox}" />
    <Style TargetType="{x:Type DatePicker}"
           BasedOn="{StaticResource ResourceKey=NewDatePicker}"
           x:Key="{x:Type DatePicker}" />
    <Style TargetType="{x:Type ScrollBar}"
           BasedOn="{StaticResource ResourceKey=NewScrollBar}"
           x:Key="{x:Type ScrollBar}" />
    <LinearGradientBrush x:Key="RainbowStyle"
                         EndPoint="0,1">
        <GradientStop Color="Red"
                      Offset="0" />
        <GradientStop Color="Orange"
                      Offset="0.16" />
        <GradientStop Color="Yellow"
                      Offset="0.32" />
        <GradientStop Color="Green"
                      Offset="0.48" />
        <GradientStop Color="SkyBlue"
                      Offset="0.64" />
        <GradientStop Color="Blue"
                      Offset="0.80" />
        <GradientStop Color="Purple"
                      Offset="1" />
    </LinearGradientBrush>
</ResourceDictionary>